/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
    id 'java-library'
}

def appName = 'MyDaemonServer'
def appVersion = '0.0.1'
def defaultEncoding = 'UTF-8'

ext {
	mainClass = 'com.withsw.App'
	jarDestDir = "D:/deploy/${appName}/${appVersion}"
	logbackVersion = '1.2.5'
	slf4jApiVersion = '1.7.32'
	janinoVersion = '3.1.6'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
	// Logging
	compile "ch.qos.logback:logback-classic:${logbackVersion}"
	compile "ch.qos.logback:logback-core:${logbackVersion}"
	compile "org.slf4j:slf4j-api:${slf4jApiVersion}" 
	compile "org.codehaus.janino:janino:${janinoVersion}"
}

jar {
	exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
	manifest {
		attributes 'Version': "${appVersion}"
		attributes 'Main-Class': "$mainClass"
		attributes 'Class-Path': "."
	}
	// ${baseName}-${appendix}-${version}-${classifier}.jar
	//baseName = "${appName}"
	//version = "${appVersion}"
	archiveName = "${appName}.jar" // baseName 속성이나 appendix 속성은 무시
	dependsOn configurations.runtime
	from {
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
}

compileJava.options.encoding = defaultEncoding

task deploy (dependsOn: build) {
	doLast {
		copy {
			from "build/libs"
			into "$jarDestDir"
			include "*.jar"
		}
	
		copy {
			from "conf"
			into "$jarDestDir/conf"
			include "*"
		}
		
		copy {
			from "lib"
			into "$jarDestDir/lib"
			include "*.jar"
		}
	}
}